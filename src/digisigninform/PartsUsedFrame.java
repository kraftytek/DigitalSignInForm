/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package digisigninform;


import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStreamReader;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.table.DefaultTableModel;
import org.krysalis.barcode4j.ChecksumMode;
import org.krysalis.barcode4j.impl.code39.Code39Bean;
import org.krysalis.barcode4j.output.bitmap.BitmapCanvasProvider;

/**
 *
 * @author kraft
 */
public class PartsUsedFrame extends javax.swing.JFrame {

    /**
     * Creates new form PartsUsedFrame
     */
    public PartsUsedFrame() {
        initComponents();
    }
    Vector<String> columnNames = new Vector<>();

    {
        columnNames.addElement("Desc");
        columnNames.addElement("UPC");
    }

    DefaultTableModel model = new DefaultTableModel(columnNames, 0) {

        @Override

        public Class<?> getColumnClass(int column) {
            if (getRowCount() > 0) {
                Object value = getValueAt(0, column);
                if (value != null) {
                    return getValueAt(0, column).getClass();
                }
            }
            return super.getColumnClass(column);
        }
    };

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        backGroundPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        upcCode = new javax.swing.JTextField();
        upcDesc = new javax.swing.JTextField();
        barCode = new javax.swing.JLabel();
        makeBarButt = new javax.swing.JButton();
        saveBarcodeButt = new javax.swing.JButton();
        upcCostText = new javax.swing.JTextField();
        upcDescText = new javax.swing.JLabel();
        upcCombo = new javax.swing.JComboBox<>();
        selectButt = new javax.swing.JButton();
        editButt = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        backGroundPanel.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("UPC Generator");

        upcCode.setBackground(new java.awt.Color(255, 255, 255));
        upcCode.setForeground(new java.awt.Color(0, 0, 0));
        upcCode.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2), "UPC Code", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION));
        upcCode.setNextFocusableComponent(upcCostText);
        upcCode.setOpaque(true);

        upcDesc.setBackground(new java.awt.Color(255, 255, 255));
        upcDesc.setForeground(new java.awt.Color(0, 0, 0));
        upcDesc.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2), "UPC Description"));
        upcDesc.setOpaque(true);

        barCode.setBackground(new java.awt.Color(255, 255, 255));
        barCode.setForeground(new java.awt.Color(0, 0, 0));
        barCode.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        barCode.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);

        makeBarButt.setBackground(new java.awt.Color(255, 255, 255));
        makeBarButt.setForeground(new java.awt.Color(0, 0, 0));
        makeBarButt.setText("Generate Barcode");
        makeBarButt.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        makeBarButt.setContentAreaFilled(false);
        makeBarButt.setFocusPainted(false);
        makeBarButt.setFocusable(false);
        makeBarButt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                makeBarButtActionPerformed(evt);
            }
        });

        saveBarcodeButt.setBackground(new java.awt.Color(255, 255, 255));
        saveBarcodeButt.setForeground(new java.awt.Color(0, 0, 0));
        saveBarcodeButt.setText("Save Barcode");
        saveBarcodeButt.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        saveBarcodeButt.setContentAreaFilled(false);
        saveBarcodeButt.setFocusPainted(false);
        saveBarcodeButt.setFocusable(false);
        saveBarcodeButt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveBarcodeButtActionPerformed(evt);
            }
        });

        upcCostText.setBackground(new java.awt.Color(255, 255, 255));
        upcCostText.setForeground(new java.awt.Color(0, 0, 0));
        upcCostText.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2), "UPC Cost", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION));
        upcCostText.setNextFocusableComponent(upcDescText);
        upcCostText.setOpaque(true);

        upcDescText.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        upcDescText.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        upcCombo.setBackground(new java.awt.Color(255, 255, 255));
        upcCombo.setForeground(new java.awt.Color(0, 0, 0));
        upcCombo.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        upcCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                upcComboActionPerformed(evt);
            }
        });

        selectButt.setBackground(new java.awt.Color(255, 255, 255));
        selectButt.setForeground(new java.awt.Color(0, 0, 0));
        selectButt.setText("Select Barcode");
        selectButt.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        selectButt.setContentAreaFilled(false);
        selectButt.setFocusPainted(false);
        selectButt.setFocusable(false);
        selectButt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectButtActionPerformed(evt);
            }
        });

        editButt.setBackground(new java.awt.Color(255, 255, 255));
        editButt.setForeground(new java.awt.Color(0, 0, 0));
        editButt.setText("Update UPC Cost");
        editButt.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        editButt.setContentAreaFilled(false);
        editButt.setFocusPainted(false);
        editButt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editButtActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout backGroundPanelLayout = new javax.swing.GroupLayout(backGroundPanel);
        backGroundPanel.setLayout(backGroundPanelLayout);
        backGroundPanelLayout.setHorizontalGroup(
            backGroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(backGroundPanelLayout.createSequentialGroup()
                .addGroup(backGroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(upcCombo, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, backGroundPanelLayout.createSequentialGroup()
                        .addComponent(upcCode, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(upcCostText, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(upcDesc, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(backGroundPanelLayout.createSequentialGroup()
                .addGroup(backGroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(backGroundPanelLayout.createSequentialGroup()
                        .addComponent(makeBarButt, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(selectButt, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(editButt, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(saveBarcodeButt, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(backGroundPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(backGroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(barCode, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(upcDescText, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        backGroundPanelLayout.setVerticalGroup(
            backGroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(backGroundPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(10, 10, 10)
                .addComponent(upcCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(backGroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(upcCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(upcDesc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(upcCostText))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(upcDescText, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(barCode, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(backGroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(backGroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(makeBarButt, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(saveBarcodeButt, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(selectButt, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(editButt, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(backGroundPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(backGroundPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    public static BufferedImage generateCode39BarcodeImage(String barcodeText) throws Exception {

        final int dpi = 180;
        Code39Bean barcodeGenerator = new Code39Bean();
        barcodeGenerator.setChecksumMode(ChecksumMode.CP_AUTO);
        barcodeGenerator.setDisplayStartStop(true);
        barcodeGenerator.setHeight(10);
        BitmapCanvasProvider canvas = new BitmapCanvasProvider(dpi, BufferedImage.TYPE_BYTE_BINARY, false, 0);
        barcodeGenerator.generateBarcode(canvas, barcodeText);
        return canvas.getBufferedImage();
    }

    public static ArrayList<String> getValues() {
        FileInputStream stream = null;
        String userDir = System.getProperty("user.dir");
        try {
            stream = new FileInputStream(userDir + "/config.txt");
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        }
        BufferedReader reader = new BufferedReader(new InputStreamReader(stream));
        String strLine;
        ArrayList<String> lines = new ArrayList<String>();
        try {
            while ((strLine = reader.readLine()) != null) {
                String lastWord = strLine.substring(strLine.lastIndexOf(" ") + 1);
                lines.add(lastWord);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        try {
            reader.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return lines;
    }

    public ArrayList<String> configList = getValues();
    public String connectionUrl = configList.get(0);

    private void makeBarButtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_makeBarButtActionPerformed

        String upcNum = upcCode.getText();

        try {
            Image newImage = generateCode39BarcodeImage(upcNum);
            String upcText = upcDesc.getText() + "->$" + upcCostText.getText();
            ImageIcon icon = new ImageIcon(newImage);
            barCode.setIcon(icon);
            upcDescText.setText(upcText);
        } catch (Exception ex) {
            Logger.getLogger(PartsUsedFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_makeBarButtActionPerformed

    private void saveBarcodeButtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveBarcodeButtActionPerformed
        String upcDescText = upcDesc.getText().replace("'", "''");
        String upcCodeText = upcCode.getText();
        String upcPriceText = upcCostText.getText();

        String upcExists = """
                               select 1 as exist
                               from upc_codes
                               where upc_code = """ + upcCodeText;

        String addUpcScript = """
                                  insert into upc_codes(upc_desc, upc_code, upc_cost)
                                  values('"""
                + upcDescText + "','"
                + upcCodeText + "','"
                + upcPriceText + "')";

        System.out.println("upc Check query: " + upcExists);
        System.out.println("add upc query " + addUpcScript);

        try ( Connection connection = DriverManager.getConnection(connectionUrl);  Statement statement = connection.createStatement();) {

            ResultSet searchRe = statement.executeQuery(upcExists);

            while (searchRe.isBeforeFirst()) {

                UpcExistsMessage gui = new UpcExistsMessage();
                gui.setVisible(true);
                System.out.println("UPC exists");
                break;
            }
            statement.executeUpdate(addUpcScript);

        } catch (SQLException e) {
        }

        try ( Connection connection = DriverManager.getConnection(connectionUrl);  Statement statement = connection.createStatement();) {

            String populateList = "select upc_desc, upc_code, upc_cost from upc_codes";
            Vector<String> upcList = new Vector<>();
            ResultSet searchQ = statement.executeQuery(populateList);

            while (searchQ.next()) {
                String upcDescTxt = searchQ.getString("upc_desc");
                String upcCodeTxt = searchQ.getString("upc_code");
                String upcCostTxt = searchQ.getString("upc_cost");

                Collections.addAll(upcList, "UPC Code: " + upcCodeTxt + ", Description: " + upcDescTxt + ", Cost: $" + upcCostTxt);
            }

            DefaultComboBoxModel model = new DefaultComboBoxModel(upcList);
            upcCombo.setModel(model);
            upcCombo.setSelectedIndex(0);

        } catch (SQLException ex) {
            Logger.getLogger(PartsUsedFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_saveBarcodeButtActionPerformed

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        try ( Connection connection = DriverManager.getConnection(connectionUrl);  Statement statement = connection.createStatement();) {

            String populateList = "select upc_desc, upc_code, upc_cost from upc_codes";
            Vector<String> upcList = new Vector<>();
            ResultSet searchQ = statement.executeQuery(populateList);

            while (searchQ.next()) {
                String upcDescText = searchQ.getString("upc_desc");
                String upcCodeText = searchQ.getString("upc_code");
                String upcCostText = searchQ.getString("upc_cost");

                Collections.addAll(upcList, "UPC Code: " + upcCodeText + ", Description: " + upcDescText + ", Cost: $" + upcCostText);
            }

            DefaultComboBoxModel model = new DefaultComboBoxModel(upcList);
            upcCombo.setModel(model);

        } catch (SQLException ex) {
            Logger.getLogger(PartsUsedFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_formWindowActivated

    private void upcComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_upcComboActionPerformed
        String selectedItem = (String) upcCombo.getSelectedItem();
        Pattern pattern = Pattern.compile("UPC Code: ");
        Matcher matcher = pattern.matcher(selectedItem);

        int endWO = 0;
        while (matcher.find()) {
            endWO = matcher.end();
        }
        String cleanUpcCode = selectedItem.substring(endWO, selectedItem.indexOf(","));

        try ( Connection connection = DriverManager.getConnection(connectionUrl);  Statement statement = connection.createStatement();) {

            String getUpcScript = "select upc_desc, upc_code, upc_cost from upc_codes where upc_code like '"
                    + cleanUpcCode + "'";

            ResultSet searchQ = statement.executeQuery(getUpcScript);
            while (searchQ.next()) {
                String upcDescText = searchQ.getString("upc_desc");
                String upcCodeText = searchQ.getString("upc_code");
                String upcCost = searchQ.getString("upc_cost").replace("$", "");

                upcCode.setText(upcCodeText);
                upcDesc.setText(upcDescText);
                upcCostText.setText("$" + upcCost);
            }

            String upcNum = upcCode.getText();

            try {
                Image newImage = generateCode39BarcodeImage(upcNum);
                ImageIcon icon = new ImageIcon(newImage);
                barCode.setIcon(icon);
                upcDescText.setText(upcDesc.getText() + "->" + upcCostText.getText());

            } catch (Exception ex) {
                Logger.getLogger(PartsUsedFrame.class.getName()).log(Level.SEVERE, null, ex);
            }

        } catch (SQLException ex) {
            Logger.getLogger(PartsUsedFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_upcComboActionPerformed
    public static Vector<ImageIcon> upcList = new Vector<>();
    public static Vector<String> upcTxt = new Vector<>();
    public static double totalCost = 0.0;
    public static List<Double> doubles = new ArrayList<>(10);


    private void selectButtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectButtActionPerformed

//******************************************************Billing stuff*******************************************************************************//
        try ( Connection connection = DriverManager.getConnection(connectionUrl);  Statement statement = connection.createStatement();) {

            String workOrderTxt = CompleteFormFront.woText.getText();
            String upcCodeText = upcCode.getText();

            //add the selected item to the link table
            String insertQue = """
                               insert into service_link(work_order_ID, service_fee_id)
                               values(
                               '""" + workOrderTxt + "',\n"
                    + "(select upc_id from upc_codes where upc_code = '" + upcCodeText + "')\n"
                    + ")";
            
                    System.out.println(insertQue);

            statement.executeUpdate(insertQue);

        } catch (SQLException e) {
            System.out.println(e);
        }
        try ( Connection connection = DriverManager.getConnection(connectionUrl);  Statement statement2 = connection.createStatement();) {
            String workOrderText2 = CompleteFormFront.woText.getText();
            String getWorkCost = """
                                 select upc.upc_cost, upc.upc_code
                                 from service_link as sl
                                 inner join upc_codes as upc
                                 on sl.service_fee_id = upc.upc_id
                                 where work_Order_ID ="""
                    + workOrderText2; 

            ResultSet searchQ = statement2.executeQuery(getWorkCost);
            ArrayList<Double> list = new ArrayList<>();
            while (searchQ.next()) {
                String costText = searchQ.getString("upc_cost");

                Double costDouble = Double.parseDouble(costText.replace("$", ""));

                list.add(costDouble);
            }
            double sum = 0;
            for (int i = 0; i <= list.size() - 1; i++) {
                sum += list.get(i);
            }
            DecimalFormat df = new DecimalFormat("#.##");
            String roundSum = df.format(sum);

            CompleteFormFront.totalText.setText("Total before tax: $" + roundSum);

        } catch (SQLException ex) {
            Logger.getLogger(SignInFront.class.getName()).log(Level.SEVERE, null, ex);
        }

//***********************************************************End of Billing stuff*************************************************************************//        
        try ( Connection connection = DriverManager.getConnection(connectionUrl);  Statement statement = connection.createStatement();) {

            String workOrderText = SignInFront.woTextArea.getText();

            String getUPCs = """
                         select upc.upc_desc, upc.upc_cost, upc.upc_code
                         from service_link as sl
                         inner join upc_codes as upc
                         on sl.service_fee_id = upc.upc_id
                         where work_Order_ID =
                         """ + workOrderText;

            ResultSet searchQ = statement.executeQuery(getUPCs);

            while (searchQ.next()) {
                String upcDescText = searchQ.getString("upc_desc");
                String upcCostText = searchQ.getString("upc_cost");
                String upcCodeText = searchQ.getString("upc_code");
                String completeText = upcDescText + " -> $" + upcCostText;
                Image newImage = generateCode39BarcodeImage(upcCodeText);
                ImageIcon icon = new ImageIcon(newImage);

                Object[] rowData = {completeText, icon};
                model.addRow(rowData);
            }

            CompleteFormFront.partsUsedList.setModel(model);
            CompleteFormFront.partsUsedList.setRowHeight(((ImageIcon) CompleteFormFront.partsUsedList.getValueAt(0, 1)).getIconHeight());
            CompleteFormFront.partsUsedList.getColumnModel().getColumn(0).setMaxWidth(130);
            CompleteFormFront.partsUsedList.getColumnModel().getColumn(0).setMinWidth(130);

        } catch (SQLException ex) {
            Logger.getLogger(PartsUsedFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(PartsUsedFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

        doubles.clear();
        dispose();

    }//GEN-LAST:event_selectButtActionPerformed

    private void editButtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editButtActionPerformed
        //apply update to upc table based on changes in the 3 fields.
        try ( Connection connection = DriverManager.getConnection(connectionUrl);  Statement statement = connection.createStatement();) {

            String upcCodeTxt = upcCode.getText();
            String upcCostTxt = upcCostText.getText();

            String updateUPC = "update upc_codes set upc_cost = '"
                    + upcCostTxt + "'\n"
                    + "from upc_codes\n"
                    + "where upc_code = '"
                    + upcCodeTxt + "'";

            statement.executeUpdate(updateUPC);

            String populateList = "select upc_desc, upc_code, upc_cost from upc_codes";
            Vector<String> upcList = new Vector<>();
            ResultSet searchQ = statement.executeQuery(populateList);

            while (searchQ.next()) {
                String upcDescText = searchQ.getString("upc_desc");
                String upcCodeText = searchQ.getString("upc_code");
                String upcCostText = searchQ.getString("upc_cost");

                Collections.addAll(upcList, "UPC Code: " + upcCodeText + ", Description: " + upcDescText + ", Cost: $" + upcCostText);
            }

            DefaultComboBoxModel model = new DefaultComboBoxModel(upcList);
            upcCombo.setModel(model);

        } catch (SQLException ex) {
            Logger.getLogger(PartsUsedFrame.class
                    .getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_editButtActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PartsUsedFrame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PartsUsedFrame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PartsUsedFrame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PartsUsedFrame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PartsUsedFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel backGroundPanel;
    public static javax.swing.JLabel barCode;
    private javax.swing.JButton editButt;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JButton makeBarButt;
    private javax.swing.JButton saveBarcodeButt;
    private javax.swing.JButton selectButt;
    public static javax.swing.JTextField upcCode;
    private javax.swing.JComboBox<String> upcCombo;
    public static javax.swing.JTextField upcCostText;
    public static javax.swing.JTextField upcDesc;
    public static javax.swing.JLabel upcDescText;
    // End of variables declaration//GEN-END:variables
}
