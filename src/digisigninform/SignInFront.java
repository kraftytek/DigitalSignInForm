/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package digisigninform;

import java.awt.Graphics;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.awt.Graphics2D;
import java.awt.print.PageFormat;
import java.awt.print.PrinterException;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.print.*;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractAction;
import javax.swing.Action;

/**
 *
 * @author kraft
 */
public class SignInFront extends javax.swing.JFrame {

    /**
     * Creates new form SignInFront
     */
    public SignInFront() {
        initComponents();
    }
    //change this to a config.txt file to make it more end user friendly
    public String connectionUrl
            = "jdbc:sqlserver://sql.kraftytek.ca:1433;"
            + "encrypt=false;"
            + "databaseName=NCRO_WorkOrders;"
            + "user=appUser;"
            + "password=S!lver88";

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        backgroundPanel = new javax.swing.JPanel();
        titleText = new javax.swing.JLabel();
        contactText = new javax.swing.JScrollPane();
        conactInfo = new javax.swing.JTextArea();
        fNameText = new javax.swing.JTextField();
        lNameText = new javax.swing.JTextField();
        phoneOneText = new javax.swing.JTextField();
        cellPhoneText = new javax.swing.JTextField();
        equipmentField = new javax.swing.JScrollPane();
        equipmentText = new javax.swing.JTextArea();
        workToDoField = new javax.swing.JScrollPane();
        workToBeDone = new javax.swing.JTextArea();
        checkLaptop = new javax.swing.JCheckBox();
        checkDesktop = new javax.swing.JCheckBox();
        checkTablet = new javax.swing.JCheckBox();
        passwordText = new javax.swing.JTextField();
        pinText = new javax.swing.JTextField();
        techComboBox = new javax.swing.JComboBox<>();
        eMailText = new javax.swing.JTextField();
        checkCharger = new javax.swing.JCheckBox();
        workPerformedArea = new javax.swing.JScrollPane();
        workDoneText = new javax.swing.JTextArea();
        partBox = new javax.swing.JTextField();
        MinChargeText = new javax.swing.JTextField();
        legalPane = new javax.swing.JScrollPane();
        legalText = new javax.swing.JTextArea();
        SigLabel = new javax.swing.JLabel();
        signText = new javax.swing.JTextField();
        connectedText = new javax.swing.JLabel();
        clientIDText = new javax.swing.JLabel();
        companyText = new javax.swing.JTextField();
        woTextArea = new javax.swing.JTextField();
        topMenu = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        addNewClientButt = new javax.swing.JMenuItem();
        searchExistingClient = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        searchWorkOrderButt = new javax.swing.JMenuItem();
        saveNewWorkOrder = new javax.swing.JMenuItem();
        updateWorkOrder = new javax.swing.JMenuItem();
        completeWorkOrder = new javax.swing.JMenuItem();
        clearWorkOrder = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        printWorkOrder = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        jMenuItem9 = new javax.swing.JMenuItem();
        jMenuItem10 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("National Computer Resource Sign In");
        setBounds(new java.awt.Rectangle(0, 0, 0, 0));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setMaximumSize(new java.awt.Dimension(696, 965));
        setMinimumSize(new java.awt.Dimension(696, 965));
        setPreferredSize(new java.awt.Dimension(696, 965));
        setResizable(false);
        setSize(new java.awt.Dimension(696, 965));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        backgroundPanel.setBackground(new java.awt.Color(255, 255, 255));
        backgroundPanel.setPreferredSize(new java.awt.Dimension(780, 927));

        titleText.setFont(new java.awt.Font("Segoe UI", 0, 20)); // NOI18N
        titleText.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titleText.setText("Service Work Order");

        contactText.setBorder(null);
        contactText.setFocusable(false);

        conactInfo.setEditable(false);
        conactInfo.setColumns(20);
        conactInfo.setRows(3);
        conactInfo.setText("  102-1980 Cooper Rd., Kelowna, B.C., Canada V1Y-8K5\n Phone: 250-868-9765 / 250-763-2492 | Fax:877-263-8594\n www.ncro.ca | service@ncro.ca | facebook.com/ncrodotca");
        conactInfo.setAutoscrolls(false);
        conactInfo.setBorder(null);
        contactText.setViewportView(conactInfo);

        fNameText.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        fNameText.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2), "First Name:", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));
        fNameText.setNextFocusableComponent(lNameText);

        lNameText.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        lNameText.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2), "Last Name:", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));
        lNameText.setNextFocusableComponent(phoneOneText);

        phoneOneText.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        phoneOneText.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2), "Home Phone:", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));
        phoneOneText.setNextFocusableComponent(cellPhoneText);

        cellPhoneText.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        cellPhoneText.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2), "Cell Phone:", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));

        equipmentField.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2), "Other Equipment:"));
        equipmentField.setNextFocusableComponent(passwordText);
        equipmentField.setOpaque(false);

        equipmentText.setColumns(1);
        equipmentText.setRows(1);
        equipmentText.setTabSize(0);
        equipmentText.setBorder(null);
        equipmentText.setNextFocusableComponent(passwordText);
        equipmentField.setViewportView(equipmentText);

        workToDoField.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2), "Work to be Done:"));
        workToDoField.setOpaque(false);

        workToBeDone.setColumns(20);
        workToBeDone.setLineWrap(true);
        workToBeDone.setRows(5);
        workToBeDone.setWrapStyleWord(true);
        workToBeDone.setBorder(null);
        workToDoField.setViewportView(workToBeDone);

        checkLaptop.setBackground(new java.awt.Color(255, 255, 255));
        checkLaptop.setText("Laptop");
        checkLaptop.setBorder(null);
        checkLaptop.setOpaque(true);

        checkDesktop.setBackground(new java.awt.Color(255, 255, 255));
        checkDesktop.setText("Desktop");

        checkTablet.setBackground(new java.awt.Color(255, 255, 255));
        checkTablet.setText("Tablet");

        passwordText.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        passwordText.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2), "Password:", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));
        passwordText.setNextFocusableComponent(pinText);

        pinText.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        pinText.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2), "Pin:", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));
        pinText.setNextFocusableComponent(workToBeDone);

        techComboBox.setBackground(new java.awt.Color(255, 255, 255));
        techComboBox.setForeground(new java.awt.Color(0, 0, 0));
        techComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Default", "Chris Reid", "Zane Zieske", "Dillan Timpany", "Tyson Schlehahn" }));
        techComboBox.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2), "Tech:", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));
        techComboBox.setFocusable(false);

        eMailText.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        eMailText.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2), "E-Mail:", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));
        eMailText.setNextFocusableComponent(equipmentText);

        checkCharger.setBackground(new java.awt.Color(255, 255, 255));
        checkCharger.setText("Charger");

        workPerformedArea.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2), "Work Performed:"));
        workPerformedArea.setOpaque(false);

        workDoneText.setColumns(20);
        workDoneText.setLineWrap(true);
        workDoneText.setRows(5);
        workDoneText.setWrapStyleWord(true);
        workDoneText.setBorder(null);
        workPerformedArea.setViewportView(workDoneText);

        partBox.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2), "Parts Used:"));
        partBox.setOpaque(true);

        MinChargeText.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        MinChargeText.setText("$50");
        MinChargeText.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2), "Sign In Fee:", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION));

        legalPane.setBorder(null);
        legalPane.setOpaque(false);

        legalText.setEditable(false);
        legalText.setColumns(20);
        legalText.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N
        legalText.setLineWrap(true);
        legalText.setRows(5);
        legalText.setText("I agree to release the above equipment to National Computer Resource (\"NCR\") for evaluation and/or repair. I agree that NCR is in no way responsible for the condition of equipment prior to be serviced, or for lost or damaged data that may occur during the evaluation and/or repair. I agree that the above description of the equipment is based solely upon my representations and may be in error. I agree that NCR makes no representations, warranties or guarantees as to the length of time to make an evaluation or repair, as to whether can in fact be made, or as to the current or future impact any evaluation or repairs may have on existing hardware, software or external and peripheral devices that may be attached to the equipment (eg., networks). I agree that service fees are payable whether or not a problem is solved. I agree that National Computer Resource will not release the above equipment until all parts and/or labour charges have been paid in full. I agree that after 90-days all unclaimed equipment becomes property of NCR.");
        legalText.setWrapStyleWord(true);
        legalText.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        legalText.setFocusable(false);
        legalPane.setViewportView(legalText);

        SigLabel.setText("Client SIgnature:");

        signText.setEditable(false);
        signText.setBackground(new java.awt.Color(255, 255, 255));
        signText.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        signText.setForeground(new java.awt.Color(0, 0, 0));
        signText.setText("________________________________________________________________________________________________________________");
        signText.setAutoscrolls(false);
        signText.setBorder(null);
        signText.setFocusable(false);
        signText.setHighlighter(null);

        connectedText.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        connectedText.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);

        clientIDText.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);

        companyText.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        companyText.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2), "Company:", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));
        companyText.setNextFocusableComponent(eMailText);

        woTextArea.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        woTextArea.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        woTextArea.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2), "Work Order ID", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));
        woTextArea.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                woTextAreaKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout backgroundPanelLayout = new javax.swing.GroupLayout(backgroundPanel);
        backgroundPanel.setLayout(backgroundPanelLayout);
        backgroundPanelLayout.setHorizontalGroup(
            backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addComponent(legalPane)
            .addGroup(backgroundPanelLayout.createSequentialGroup()
                .addComponent(SigLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 131, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(signText, javax.swing.GroupLayout.PREFERRED_SIZE, 553, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(backgroundPanelLayout.createSequentialGroup()
                .addGroup(backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(backgroundPanelLayout.createSequentialGroup()
                        .addGroup(backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(phoneOneText)
                            .addComponent(fNameText))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cellPhoneText)
                            .addComponent(lNameText)))
                    .addComponent(companyText)
                    .addComponent(eMailText)
                    .addComponent(workToDoField, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(passwordText, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(equipmentField, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(techComboBox, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(backgroundPanelLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(checkLaptop, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(checkDesktop, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(checkTablet, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(checkCharger, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addComponent(pinText)))
            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, backgroundPanelLayout.createSequentialGroup()
                .addGroup(backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(workPerformedArea)
                    .addComponent(MinChargeText, javax.swing.GroupLayout.PREFERRED_SIZE, 492, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(partBox))
            .addGroup(backgroundPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(connectedText, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(clientIDText, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(contactText, javax.swing.GroupLayout.DEFAULT_SIZE, 350, Short.MAX_VALUE)
                    .addComponent(titleText, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(25, 25, 25)
                .addComponent(woTextArea, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        backgroundPanelLayout.setVerticalGroup(
            backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(backgroundPanelLayout.createSequentialGroup()
                .addGroup(backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(backgroundPanelLayout.createSequentialGroup()
                        .addGroup(backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(titleText, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(connectedText, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(contactText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(clientIDText, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(backgroundPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(woTextArea, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(backgroundPanelLayout.createSequentialGroup()
                        .addGroup(backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(fNameText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lNameText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, backgroundPanelLayout.createSequentialGroup()
                        .addGroup(backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(checkLaptop)
                            .addComponent(checkDesktop, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(checkTablet, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(checkCharger, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)))
                .addGroup(backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(phoneOneText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(techComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cellPhoneText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(backgroundPanelLayout.createSequentialGroup()
                        .addComponent(equipmentField, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(passwordText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pinText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(backgroundPanelLayout.createSequentialGroup()
                        .addComponent(companyText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(eMailText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(workToDoField, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(backgroundPanelLayout.createSequentialGroup()
                        .addComponent(workPerformedArea, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(MinChargeText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(partBox, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(legalPane, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SigLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(signText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(159, 159, 159))
        );

        topMenu.setBackground(new java.awt.Color(255, 255, 255));
        topMenu.setBorder(null);
        topMenu.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        jMenu1.setBackground(new java.awt.Color(255, 255, 255));
        jMenu1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jMenu1.setForeground(new java.awt.Color(0, 0, 0));
        jMenu1.setText("Client Options");
        jMenu1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jMenu1.setMinimumSize(new java.awt.Dimension(140, 24));
        jMenu1.setPreferredSize(new java.awt.Dimension(172, 26));

        addNewClientButt.setBackground(new java.awt.Color(255, 255, 255));
        addNewClientButt.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        addNewClientButt.setForeground(new java.awt.Color(0, 0, 0));
        addNewClientButt.setText("Add New Client");
        addNewClientButt.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        addNewClientButt.setOpaque(true);
        addNewClientButt.setPreferredSize(new java.awt.Dimension(172, 26));
        addNewClientButt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addNewClientButtActionPerformed(evt);
            }
        });
        jMenu1.add(addNewClientButt);

        searchExistingClient.setBackground(new java.awt.Color(255, 255, 255));
        searchExistingClient.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        searchExistingClient.setForeground(new java.awt.Color(0, 0, 0));
        searchExistingClient.setText("Search Existing Clients");
        searchExistingClient.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        searchExistingClient.setOpaque(true);
        searchExistingClient.setPreferredSize(new java.awt.Dimension(172, 26));
        searchExistingClient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchExistingClientActionPerformed(evt);
            }
        });
        jMenu1.add(searchExistingClient);

        topMenu.add(jMenu1);

        jMenu2.setBackground(new java.awt.Color(255, 255, 255));
        jMenu2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jMenu2.setForeground(new java.awt.Color(0, 0, 0));
        jMenu2.setText("Work Order Options");
        jMenu2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jMenu2.setPreferredSize(new java.awt.Dimension(172, 26));

        searchWorkOrderButt.setBackground(new java.awt.Color(255, 255, 255));
        searchWorkOrderButt.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        searchWorkOrderButt.setForeground(new java.awt.Color(0, 0, 0));
        searchWorkOrderButt.setText("Search Work Order");
        searchWorkOrderButt.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        searchWorkOrderButt.setOpaque(true);
        searchWorkOrderButt.setPreferredSize(new java.awt.Dimension(172, 26));
        searchWorkOrderButt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchWorkOrderButtActionPerformed(evt);
            }
        });
        jMenu2.add(searchWorkOrderButt);

        saveNewWorkOrder.setBackground(new java.awt.Color(255, 255, 255));
        saveNewWorkOrder.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        saveNewWorkOrder.setForeground(new java.awt.Color(0, 0, 0));
        saveNewWorkOrder.setText("Save New Work Order");
        saveNewWorkOrder.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        saveNewWorkOrder.setOpaque(true);
        saveNewWorkOrder.setPreferredSize(new java.awt.Dimension(172, 26));
        saveNewWorkOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveNewWorkOrderActionPerformed(evt);
            }
        });
        jMenu2.add(saveNewWorkOrder);

        updateWorkOrder.setBackground(new java.awt.Color(255, 255, 255));
        updateWorkOrder.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        updateWorkOrder.setForeground(new java.awt.Color(0, 0, 0));
        updateWorkOrder.setText("Update Work Order");
        updateWorkOrder.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        updateWorkOrder.setOpaque(true);
        updateWorkOrder.setPreferredSize(new java.awt.Dimension(172, 26));
        updateWorkOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateWorkOrderActionPerformed(evt);
            }
        });
        jMenu2.add(updateWorkOrder);

        completeWorkOrder.setBackground(new java.awt.Color(255, 255, 255));
        completeWorkOrder.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        completeWorkOrder.setForeground(new java.awt.Color(0, 0, 0));
        completeWorkOrder.setText("Complete Work Order");
        completeWorkOrder.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        completeWorkOrder.setOpaque(true);
        completeWorkOrder.setPreferredSize(new java.awt.Dimension(172, 26));
        completeWorkOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                completeWorkOrderActionPerformed(evt);
            }
        });
        jMenu2.add(completeWorkOrder);

        clearWorkOrder.setBackground(new java.awt.Color(255, 255, 255));
        clearWorkOrder.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        clearWorkOrder.setForeground(new java.awt.Color(0, 0, 0));
        clearWorkOrder.setText("Clear Work Order");
        clearWorkOrder.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        clearWorkOrder.setOpaque(true);
        clearWorkOrder.setPreferredSize(new java.awt.Dimension(172, 26));
        clearWorkOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearWorkOrderActionPerformed(evt);
            }
        });
        jMenu2.add(clearWorkOrder);

        topMenu.add(jMenu2);

        jMenu3.setBackground(new java.awt.Color(255, 255, 255));
        jMenu3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jMenu3.setForeground(new java.awt.Color(0, 0, 0));
        jMenu3.setText("Print Options");
        jMenu3.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jMenu3.setPreferredSize(new java.awt.Dimension(172, 26));

        printWorkOrder.setBackground(new java.awt.Color(255, 255, 255));
        printWorkOrder.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        printWorkOrder.setForeground(new java.awt.Color(0, 0, 0));
        printWorkOrder.setText("Print Work Order");
        printWorkOrder.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        printWorkOrder.setOpaque(true);
        printWorkOrder.setPreferredSize(new java.awt.Dimension(172, 26));
        printWorkOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printWorkOrderActionPerformed(evt);
            }
        });
        jMenu3.add(printWorkOrder);

        topMenu.add(jMenu3);

        jMenu4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jMenu4.setText("Other Options");
        jMenu4.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jMenu4.setPreferredSize(new java.awt.Dimension(172, 26));

        jMenuItem9.setBackground(new java.awt.Color(255, 255, 255));
        jMenuItem9.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jMenuItem9.setForeground(new java.awt.Color(0, 0, 0));
        jMenuItem9.setText("About App");
        jMenuItem9.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jMenuItem9.setOpaque(true);
        jMenuItem9.setPreferredSize(new java.awt.Dimension(172, 26));
        jMenuItem9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem9ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem9);

        jMenuItem10.setBackground(new java.awt.Color(255, 255, 255));
        jMenuItem10.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jMenuItem10.setForeground(new java.awt.Color(0, 0, 0));
        jMenuItem10.setText("About Creator");
        jMenuItem10.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jMenuItem10.setOpaque(true);
        jMenuItem10.setPreferredSize(new java.awt.Dimension(172, 26));
        jMenuItem10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem10ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem10);

        topMenu.add(jMenu4);

        setJMenuBar(topMenu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(backgroundPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 690, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(backgroundPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 910, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated

        try ( Connection connection = DriverManager.getConnection(connectionUrl);  Statement statement = connection.createStatement();) {

            String selectUser = "select username from users where username = 'Connected'";

            ResultSet uNQuery = statement.executeQuery(selectUser);

            // Print results from select statement
            while (uNQuery.next()) {

                connectedText.setText("Connected");
            }
        } catch (SQLException e) {
            System.out.println(e);
        }
    }//GEN-LAST:event_formWindowActivated

    public static class Printer implements Printable {

        final Component comp;

        public Printer(Component comp) {
            this.comp = comp;
        }

        @
                Override
        public int print(Graphics g, PageFormat format, int page_index)
                throws PrinterException {
            if (page_index > 0) {
                return Printable.NO_SUCH_PAGE;
            }

            // get the bounds of the component
            Dimension dim = comp.getSize();
            double cHeight = dim.getHeight();
            double cWidth = dim.getWidth();

            // get the bounds of the printable area
            double pHeight = format.getImageableHeight();
            double pWidth = format.getImageableWidth();

            double pXStart = format.getImageableX();
            double pYStart = format.getImageableY();

            double xRatio = pWidth / cWidth;
            double yRatio = pHeight / cHeight;

            Graphics2D g2 = (Graphics2D) g;
            g2.translate(pXStart, pYStart);
            g2.scale(xRatio + 50, yRatio + 50);
            comp.paint(g2);

            return Printable.PAGE_EXISTS;
        }
    }


    private void searchExistingClientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchExistingClientActionPerformed
        searchForm gui = new searchForm();
        gui.setVisible(true);
    }//GEN-LAST:event_searchExistingClientActionPerformed

    private void searchWorkOrderButtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchWorkOrderButtActionPerformed
        try ( Connection connection = DriverManager.getConnection(connectionUrl);  Statement statement = connection.createStatement();) {
            String defaultWO = woTextArea.getText();
            String cleanWO = defaultWO.trim();

            String topWorkOrder = """
                                  select work_order_id, cs.client_id, work_to_do, cs.pc_pass, cs.pc_pin, cs.other_equip, tech_name, desktop, laptop, tablet, charger, cs.client_id,
                                  c.fname, c.lname, c.phone, c.phone2, c.email, work_done, c.companyName
                                  from client_service as cs
                                  inner join clients as c
                                  on cs.client_id = c.client_id
                                  where work_order_ID = """
                    + cleanWO;

            ResultSet searchQ = statement.executeQuery(topWorkOrder);

            while (searchQ.next()) {
                String woToDoText = searchQ.getString("work_to_do");
                String passText = searchQ.getString("pc_pass");
                String pinText = searchQ.getString("pc_pin");
                Boolean desktop = searchQ.getBoolean("desktop");
                Boolean laptop = searchQ.getBoolean("laptop");
                Boolean tablet = searchQ.getBoolean("tablet");
                Boolean charger = searchQ.getBoolean("charger");
                String firstName = searchQ.getString("fname");
                String lastName = searchQ.getString("lname");
                String phoneNumber = searchQ.getString("phone").replace("-", "");
                String cellNumber = searchQ.getString("phone2").replace("-", "");
                String emailText = searchQ.getString("email");
                String clientID = searchQ.getString("client_id");
                String workDone = searchQ.getString("work_done");
                String companyString = searchQ.getString("companyName");
                String otherEquip = searchQ.getString("other_equip");
                String phoneFormat;
                String cellFormat;

                if (phoneNumber.length() > 0) {
                    phoneFormat = "(" + phoneNumber.substring(0, 3) + ")-" + phoneNumber.substring(3, 6) + "-" + phoneNumber.substring(6);
                } else {
                    phoneFormat = phoneNumber;
                };

                if (cellNumber.length() > 0) {
                    cellFormat = "(" + cellNumber.substring(0, 3) + ")-" + cellNumber.substring(3, 6) + "-" + cellNumber.substring(6);
                } else {
                    cellFormat = cellNumber;
                };

                //add tech
                SignInFront.clientIDText.setText(clientID);
                SignInFront.workToBeDone.setText(woToDoText);
                SignInFront.passwordText.setText(passText);
                SignInFront.pinText.setText(pinText);
                SignInFront.checkLaptop.setSelected(laptop);
                SignInFront.checkDesktop.setSelected(desktop);
                SignInFront.checkTablet.setSelected(tablet);
                SignInFront.checkCharger.setSelected(charger);
                SignInFront.fNameText.setText(firstName);
                SignInFront.lNameText.setText(lastName);
                SignInFront.phoneOneText.setText(phoneFormat);
                SignInFront.cellPhoneText.setText(cellFormat);
                SignInFront.eMailText.setText(emailText);
                SignInFront.clientIDText.setText("Client ID: " + clientID);
                SignInFront.workDoneText.setText(workDone);
                SignInFront.companyText.setText(companyString);
                SignInFront.equipmentText.setText(otherEquip);
            }

        } catch (SQLException e) {
        }
    }//GEN-LAST:event_searchWorkOrderButtActionPerformed

    private void saveNewWorkOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveNewWorkOrderActionPerformed

        //perform a check first to make sure that the work order does not exist already by matching string content and return popup with try update button instead
        try ( Connection connection = DriverManager.getConnection(connectionUrl);  Statement addWorkOrder = connection.createStatement();) {

            String currentClient = clientIDText.getText();
            String workToDo = workToBeDone.getText();
            boolean desktop = checkDesktop.isSelected();
            boolean laptop = checkLaptop.isSelected();
            boolean tablet = checkTablet.isSelected();
            boolean charger = checkCharger.isSelected();
            String clientPass = passwordText.getText();
            String clientPin = pinText.getText();
            String techName = techComboBox.getSelectedItem().toString();
            String workDone = workDoneText.getText();
            String otherEquip = equipmentText.getText();

            int desktopBool = (desktop) ? 1 : 0;
            int laptopBool = (laptop) ? 1 : 0;
            int tabletBool = (tablet) ? 1 : 0;
            int chargerBool = (charger) ? 1 : 0;

            String addClientScript = "insert into client_service(client_id, work_to_do, pc_pass, pc_pin, other_equip, tech_name, desktop, laptop, tablet, charger, work_done)"
                    + "select " + currentClient + " as client_id,"
                    + "'" + workToDo + "' as work_to_do,"
                    + "'" + clientPass + "' as pc_pass,"
                    + "'" + clientPin + "' as pc_pin,"
                    + "'" + otherEquip + "' as other_equip,"
                    + "'" + techName + "' as tech_name,"
                    + desktopBool + " as desktop,"
                    + laptopBool + " as laptop,"
                    + tabletBool + " as tablet,"
                    + chargerBool + " as charger,"
                    + "'" + workDone + "' as work_done";

            System.out.println(addClientScript);

            String getWorkOrder = "select top 1 work_order_id from client_service order by 1 desc";

            addWorkOrder.executeUpdate(addClientScript);

            ResultSet searchQ = addWorkOrder.executeQuery(getWorkOrder);

            while (searchQ.next()) {
                String workOrderText = searchQ.getString("work_order_id");
                woTextArea.setText(workOrderText);
            }

            SaveCompleteMessage gui = new SaveCompleteMessage();
            gui.setVisible(true);

        } catch (SQLException e) {
        }
    }//GEN-LAST:event_saveNewWorkOrderActionPerformed

    private void updateWorkOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateWorkOrderActionPerformed
        try ( Connection connection = DriverManager.getConnection(connectionUrl);  Statement addWorkOrder = connection.createStatement();) {

            String workToDo = workToBeDone.getText();
            String clientPass = passwordText.getText();
            String clientPin = pinText.getText();
            String workDone = workDoneText.getText();
            String workOrderID = woTextArea.getText();

            String addClientScript = "update client_service"
                    + " set work_to_do = '" + workToDo + "', "
                    + "pc_pass = '" + clientPass + "', "
                    + "pc_pin = '" + clientPin + "', "
                    + "work_done = '" + workDone + "'"
                    + "where work_order_ID = ltrim(rtrim('" + workOrderID + "'))";

            System.out.println(addClientScript);

            addWorkOrder.executeUpdate(addClientScript);

        } catch (SQLException e) {
        }
    }//GEN-LAST:event_updateWorkOrderActionPerformed

    private static final SimpleDateFormat sdf3 = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");


    private void completeWorkOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_completeWorkOrderActionPerformed
        CompleteFormFront gui = new CompleteFormFront();
        gui.setVisible(true);

        String date = sdf3.format(new Date());

        //String dateString = date.toString();
        //String cleanDate = dateString.substring(0, 16);
        //completion date
        String fname = fNameText.getText();
        String lname = lNameText.getText();
        String companyName = companyText.getText();
        String phoneText = phoneOneText.getText();
        String cellText = cellPhoneText.getText();
        String emailText = eMailText.getText();

        String workToDo = workToBeDone.getText();
        String workPerformed = workDoneText.getText();
        String workOrderID = woTextArea.getText();

        CompleteFormFront.fNameText.setText(fname);
        CompleteFormFront.lNameText.setText(lname);
        CompleteFormFront.phoneText.setText(phoneText);
        CompleteFormFront.cellText.setText(cellText);
        CompleteFormFront.compName.setText(companyName);
        CompleteFormFront.eMailText.setText(emailText);

        CompleteFormFront.workToDoText.setText(workToDo);
        CompleteFormFront.workPerformedText.setText(workPerformed);
        CompleteFormFront.woText.setText(workOrderID);
        CompleteFormFront.receivedText.setText(date);

    }//GEN-LAST:event_completeWorkOrderActionPerformed

    private void clearWorkOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearWorkOrderActionPerformed
        fNameText.setText("");
        lNameText.setText("");
        phoneOneText.setText("");
        cellPhoneText.setText("");
        checkDesktop.setSelected(false);
        checkLaptop.setSelected(false);
        checkTablet.setSelected(false);
        checkCharger.setSelected(false);
        workToBeDone.setText("");
        workDoneText.setText("");
        equipmentText.setText("");
        passwordText.setText("");
        pinText.setText("");
        eMailText.setText("");
        clientIDText.setText("");
        woTextArea.setText("");
        companyText.setText("");
    }//GEN-LAST:event_clearWorkOrderActionPerformed

    private void printWorkOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printWorkOrderActionPerformed

        PrinterJob pjob = PrinterJob.getPrinterJob();
        PageFormat preformat = pjob.defaultPage();
        preformat.setOrientation(PageFormat.PORTRAIT);
        PageFormat postformat = pjob.pageDialog(preformat);
        Paper paper = new Paper();
        double margin = 2; //adjust print margin with this
        paper.setImageableArea(margin, margin, paper.getWidth() - margin * 2, paper.getHeight()
                - margin * 2);
        postformat.setPaper(paper);
        //If user does not hit cancel then print.
        if (preformat != postformat) {
            //Set print component
            pjob.setPrintable(new PrintForm.Printer(backgroundPanel), postformat);
            if (pjob.printDialog()) {
                try {
                    pjob.print();
                } catch (PrinterException ex) {
                    Logger.getLogger(SignInFront.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }

    }//GEN-LAST:event_printWorkOrderActionPerformed

    private void woTextAreaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_woTextAreaKeyPressed
        woTextArea.addActionListener(action);
    }//GEN-LAST:event_woTextAreaKeyPressed

    private void addNewClientButtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addNewClientButtActionPerformed

        if (fNameText.getText().length() > 0) {

            try ( Connection connection = DriverManager.getConnection(connectionUrl);  Statement addWorkOrder = connection.createStatement();) {

                String firstName = fNameText.getText();
                String lastName = lNameText.getText();
                String phoneHome = phoneOneText.getText();
                String phoneCell = cellPhoneText.getText();
                String companyString = companyText.getText();
                String emailString = eMailText.getText();

                String addClientScript = "insert into clients(fname, lname, companyName, phone, phone2, email, creation_date)"
                        + "select '"
                        + firstName + "' as fname, '"
                        + lastName + "' as lname, '"
                        + companyString + "' as companyName, '"
                        + phoneHome + "' as phone, '"
                        + phoneCell + "' as phone2,'"
                        + emailString + "' as email,"
                        + "getdate() as creation_date";

                addWorkOrder.executeUpdate(addClientScript);

                String getClientID = "select client_id from clients where fname = '"
                        + firstName + "' and lname = '"
                        + lastName + "' and phone = '"
                        + phoneHome + "'";

                ResultSet searchQ = addWorkOrder.executeQuery(getClientID);

                while (searchQ.next()) {
                    String clientIDString = searchQ.getString("client_id");
                    clientIDText.setText(clientIDString);
                }
                NewClientAddedMessage gui = new NewClientAddedMessage();
                gui.setVisible(true);

                String getWorkOrder = "select top 1 work_order_id from client_service order by 1 desc";

                addWorkOrder.executeUpdate(addClientScript);

                ResultSet searchT = addWorkOrder.executeQuery(getWorkOrder);

                while (searchT.next()) {
                    String workOrderText = searchT.getString("work_order_id");
                    woTextArea.setText(workOrderText);
                }

            } catch (SQLException e) {
            }
        } else {
            AddNewClientError gui = new AddNewClientError();
            gui.setVisible(true);
        }
    }//GEN-LAST:event_addNewClientButtActionPerformed

    private void jMenuItem9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem9ActionPerformed
        AboutAppFrame gui = new AboutAppFrame();
        gui.setVisible(true);
    }//GEN-LAST:event_jMenuItem9ActionPerformed

    private void jMenuItem10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem10ActionPerformed
        AboutCreatorFrame gui = new AboutCreatorFrame();
        gui.setVisible(true);
    }//GEN-LAST:event_jMenuItem10ActionPerformed

    Action action = new AbstractAction() {
        @Override
        public void actionPerformed(ActionEvent e) {
            try ( Connection connection = DriverManager.getConnection(connectionUrl);  Statement statement = connection.createStatement();) {
                String defaultWO = woTextArea.getText();
                String cleanWO = defaultWO.trim();

                String topWorkOrder = """
                                  select work_order_id, cs.client_id, work_to_do, cs.pc_pass, cs.pc_pin, cs.other_equip, tech_name, desktop, laptop, tablet, charger, cs.client_id,
                                  c.fname, c.lname, c.phone, c.phone2, c.email, work_done, c.companyName
                                  from client_service as cs
                                  inner join clients as c
                                  on cs.client_id = c.client_id
                                  where work_order_ID = """
                        + cleanWO;

                ResultSet searchQ = statement.executeQuery(topWorkOrder);

                while (searchQ.next()) {
                    String woToDoText = searchQ.getString("work_to_do");
                    String passText = searchQ.getString("pc_pass");
                    String pinText = searchQ.getString("pc_pin");
                    Boolean desktop = searchQ.getBoolean("desktop");
                    Boolean laptop = searchQ.getBoolean("laptop");
                    Boolean tablet = searchQ.getBoolean("tablet");
                    Boolean charger = searchQ.getBoolean("charger");
                    String firstName = searchQ.getString("fname");
                    String lastName = searchQ.getString("lname");
                    String phoneNumber = searchQ.getString("phone").replace("-", "");
                    String cellNumber = searchQ.getString("phone2").replace("-", "");
                    String emailText = searchQ.getString("email");
                    String otherEquip = searchQ.getString("other_equip");
                    String clientID = searchQ.getString("client_id");
                    String workDone = searchQ.getString("work_done");
                    String companyString = searchQ.getString("companyName");
                    String phoneFormat;
                    String cellFormat;

                    if (phoneNumber.length() > 0) {
                        phoneFormat = "(" + phoneNumber.substring(0, 3) + ")-" + phoneNumber.substring(3, 6) + "-" + phoneNumber.substring(6);
                    } else {
                        phoneFormat = phoneNumber;
                    }

                    if (cellNumber.length() > 0) {
                        cellFormat = "(" + cellNumber.substring(0, 3) + ")-" + cellNumber.substring(3, 6) + "-" + cellNumber.substring(6);
                    } else {
                        cellFormat = cellNumber;
                    }

                    //add tech
                    SignInFront.clientIDText.setText(clientID);
                    SignInFront.workToBeDone.setText(woToDoText);
                    SignInFront.passwordText.setText(passText);
                    SignInFront.pinText.setText(pinText);
                    SignInFront.checkLaptop.setSelected(laptop);
                    SignInFront.checkDesktop.setSelected(desktop);
                    SignInFront.checkTablet.setSelected(tablet);
                    SignInFront.checkCharger.setSelected(charger);
                    SignInFront.fNameText.setText(firstName);
                    SignInFront.lNameText.setText(lastName);
                    SignInFront.phoneOneText.setText(phoneFormat);
                    SignInFront.cellPhoneText.setText(cellFormat);
                    SignInFront.eMailText.setText(emailText);
                    SignInFront.equipmentText.setText(otherEquip);
                    SignInFront.clientIDText.setText("Client ID: " + clientID);
                    SignInFront.workDoneText.setText(workDone);
                    SignInFront.companyText.setText(companyString);
                }

            } catch (SQLException t) {
            }
        }
    };

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {


        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SignInFront().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField MinChargeText;
    private javax.swing.JLabel SigLabel;
    private javax.swing.JMenuItem addNewClientButt;
    private javax.swing.JPanel backgroundPanel;
    public static javax.swing.JTextField cellPhoneText;
    public static javax.swing.JCheckBox checkCharger;
    public static javax.swing.JCheckBox checkDesktop;
    public static javax.swing.JCheckBox checkLaptop;
    public static javax.swing.JCheckBox checkTablet;
    private javax.swing.JMenuItem clearWorkOrder;
    public static javax.swing.JLabel clientIDText;
    public static javax.swing.JTextField companyText;
    private javax.swing.JMenuItem completeWorkOrder;
    private javax.swing.JTextArea conactInfo;
    private javax.swing.JLabel connectedText;
    private javax.swing.JScrollPane contactText;
    public static javax.swing.JTextField eMailText;
    private javax.swing.JScrollPane equipmentField;
    public static javax.swing.JTextArea equipmentText;
    public static javax.swing.JTextField fNameText;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuItem jMenuItem10;
    private javax.swing.JMenuItem jMenuItem9;
    public static javax.swing.JTextField lNameText;
    private javax.swing.JScrollPane legalPane;
    private javax.swing.JTextArea legalText;
    private javax.swing.JTextField partBox;
    public static javax.swing.JTextField passwordText;
    public static javax.swing.JTextField phoneOneText;
    public static javax.swing.JTextField pinText;
    private javax.swing.JMenuItem printWorkOrder;
    private javax.swing.JMenuItem saveNewWorkOrder;
    private javax.swing.JMenuItem searchExistingClient;
    private javax.swing.JMenuItem searchWorkOrderButt;
    private javax.swing.JTextField signText;
    public static javax.swing.JComboBox<String> techComboBox;
    private javax.swing.JLabel titleText;
    private javax.swing.JMenuBar topMenu;
    private javax.swing.JMenuItem updateWorkOrder;
    public static javax.swing.JTextField woTextArea;
    public static javax.swing.JTextArea workDoneText;
    private javax.swing.JScrollPane workPerformedArea;
    public static javax.swing.JTextArea workToBeDone;
    private javax.swing.JScrollPane workToDoField;
    // End of variables declaration//GEN-END:variables
}
